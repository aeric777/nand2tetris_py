// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {
    field Array buffer;
    field int bufferLen;
    field int strLen;
    
    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
        if( maxLength = 0 ) {
            let maxLength = 1;
        }
        let buffer = Array.new(maxLength);
        let bufferLen = maxLength;
        let strLen = 0;
        return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
        do Array.dispose(buffer);
        return;
    }

    /** Returns the current length of this String. */
    method int length() {
        return strLen;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
        return buffer[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
        let buffer[j] = c;
        return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
        if( strLen < bufferLen ) {
            let buffer[strLen] = c;
            let strLen = strLen + 1;
        }
        return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
        if( strLen > 0 ) {
            let strLen = strLen - 1;
        }
        return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
        var int intVal;
        var int i;
        var boolean neg;
        
        let intVal = 0;
        
        if( (strLen > 0) & (buffer[0] = 45) ) {      // '-'
            let neg = true;
            let i = 1;
        }
        else {
            let neg = false;
            let i = 0;
        }
        
        while( (i < strLen) & String.isDigit(buffer[i]) ) {
            let intVal = (intVal * 10) + String.digitVal(buffer[i]);
            let i = i + 1;
        }
        
        if( neg ) {
            return -intVal;
        }
        else {
            return intVal;
        }
    }
    
    /** Returns whether the given char is a digit or not */
    function boolean isDigit(char c) {
        return ~(c < 48) & ~(c > 57);
    }
    
    /** Returns the integer value of the given digit character */
    function int digitVal(char c) {
        return c - 48;
    }
    
    /** Returns the char value of the given integer (must have 0<=value<=9) */
    function char digitChar(int i) {
        return i + 48;
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
        let strLen = 0;    // Clear string
        
        if( number < 0 ) {
            let number = -number;
            do appendChar(45);      // leading '-'
        }
        
        do doSetInt(number);
        return;
    }

    method void doSetInt(int number) {
        var int q;
        var int mod;
        var char c;
        
        let q = number / 10;
        let mod = number - (q*10);
        let c = String.digitChar(mod);
        
        if( number < 10 ) {
            do appendChar(c);
        }
        else {
            do doSetInt(q);
            do appendChar(c);
        }
        return;
    }
    
    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}