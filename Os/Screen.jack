// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {
    static Array screen;
    static boolean curColour;
    static int whitePixel;
    static int blackPixel;
    static boolean white;
    static boolean black;
    
    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let white = false;
        let black = true;
        let whitePixel = 0;
        let blackPixel = 1;
        let curColour = black;
        return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while( i < 8192 ) {
            let screen[i] = white;
        }
        return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
        let curColour = b;
        return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
        var int address;
        var int mask;

        let address = (y*32) + (x/16);
        let mask = Math.twoToThe(x & 15);

        if( curColour ) {
            let screen[address] = screen[address] | mask;
        }
        else {
            let screen[address] = screen[address] & ~mask;
        }

        return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy;
        var int temp;
        
        // Make sure x1 <= x2
        if( x1 > x2 ) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;
        
        if( dx = 0 ) {
            do Screen.drawVerticalLine( x1, y1, y2 );
        }
        else { if( dy = 0 ) {
            do Screen.drawHorizontalLine( x1, x2, y1 );
        }
        else {
            do Screen.drawDiagonalLine( x1, y1, x2, y2, dx, dy );
        }}
        
        return;
    }
    
    function void drawDiagonalLine( int x1, int y1, int x2, int y2, int dx, int dy ) {
        var int a, b;
        var int adyMinusbdx;
        var int yIncr;

        let a = 0;
        let b = 0;
        let adyMinusbdx = 0;
        
        if( dy < 0 ) {
            let yIncr = -1;
        }
        else {
            let yIncr = 1;
        }

        while( ~(a > dx) & (((yIncr = 1) & ~(b > dy)) | ((yIncr = -1) & ~(b < dy))) ) {
            do Screen.drawPixel( x1+a, y1+b );
            if( adyMinusbdx < 0 ) {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + (dy*yIncr);
            }
            else {
                let b = b + yIncr;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }
        return;
    }

    function void drawVerticalLine( int x, int y1, int y2 ) {
        var int temp;
        
        // Make sure y1 <= y2
        if( y1 > y2 ) {
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        
        while( ~(y1 > y2) ) {
            do Screen.drawPixel( x, y1 );
            let y1 = y1 + 1;
        }
        return;
    }
    
    function void drawHorizontalLine( int x1, int x2, int y ) {
        var int startAddr, endAddr;
        var int x1mod16, x2mod16;
        
        let x1mod16 = x1 & 15;
        let x2mod16 = x2 & 15;
        let startAddr = (y*32) + (x1/16);
        let endAddr = (y*32) + (x2/16) + (x2mod16=0);

        if( startAddr = endAddr ) {   // line starts and ends within the same screen address
            do Screen.drawShortHorizontalLine( x1, x2, y );
        }
        else { 
            if( ~(x1mod16 = 0) ) {      // Draw the short start of the line
                let startAddr = startAddr + 1;
                do Screen.drawShortHorizontalLine( x1, x1+16-x1mod16, y );
            }
            if( ~(x2mod16 = 0) ) {      // Draw the short end of the line
                let endAddr = endAddr - 1;
                do Screen.drawShortHorizontalLine( x2-x2mod16, x2, y );
            }
            while( ~(startAddr > endAddr) ) {     // Draw the middle of the line
                let screen[startAddr] = curColour;
                let startAddr = startAddr + 1;
            }
        }
        
        return;
    }
    
    function void drawShortHorizontalLine( int x1, int x2, int y ) {
        while( ~(x1 > x2) ) {
            do Screen.drawPixel( x1, y );
            let x1 = x1 + 1;
        }
    
        return;
    }
    
    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        
        let y = y1;
        while( ~(y > y2) ) {
            do Screen.drawHorizontalLine(x1, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
        var int dx, dy;
        var int rSquared;
        
        let dy = -r;
        let rSquared = r*r;
        while( ~(dy > r) ) {
            let dx = Math.sqrt(rSquared-(dy*dy));
            do Screen.drawHorizontalLine( cx-dx, cx+dx, cy+dy );
            let dy = dy + 1;
        }
        return;
    }
}