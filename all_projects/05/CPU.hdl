// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

        // RegisterA
        Mux16(a=instruction, b=outALU, sel=instruction[15], out=inA);
        Not(in=instruction[15], out=ins15Ng);
        Or(a=writeA, b=ins15Ng, out=loadA);
        ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM);

        // RegisterD
        DRegister(in=outALU, load=writeD, out=outD);

        //ALU
        Mux16(a=outA, b=inM, sel=instruction[12], out=inALU2);
        ALU(x=outD, y=inALU2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=zrALU, ng=ngALU);

        Mux(a=false, b=true, sel=instruction[3], out=writeMTemp);
        And(a=instruction[15], b=writeMTemp, out=writeM);
        Mux(a=false, b=true, sel=instruction[4], out=writeDTemp);
        And(a=instruction[15], b=writeDTemp, out=writeD);
        Mux(a=false, b=true, sel=instruction[5], out=writeATemp);
        And(a=instruction[15], b=writeATemp, out=writeA);

        Mux(a=false, b=true, sel=instruction[0], out=gt);
        Mux(a=false, b=true, sel=instruction[1], out=eq);
        Mux(a=false, b=true, sel=instruction[2], out=lt);

        Not(in=zrALU, out=Nzr);
        Not(in=ngALU, out=Nng);

        And(a=zrALU,b=eq , out=jmp1);
        And(a=ngALU, b=lt, out=jmp2);
        And(a=Nzr, b=Nng, out=ZrNg);
        And(a=ZrNg, b=gt, out=jmp3);
        Or(a=jmp1, b=jmp2, out=jmp12);
        Or(a=jmp12, b=jmp3, out=jmpTemp);
        And(a=instruction[15], b=jmpTemp, out=jmp);

        // PC
        PC(in=outA, inc=true, load=jmp, reset=reset, out[0..14]=pc);

}